from django.contrib.auth.models import AbstractUser
from django.db import models
from django.utils import timezone
from django.conf import settings
from zoneinfo import ZoneInfo
from django.core.validators import MinValueValidator, MaxValueValidator
import uuid


class User(AbstractUser):
    """Custom User Model with role-based access and export limits"""
    
    USER_TYPES = [
        ('user', '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'),
        ('admin', '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö'),
        ('superuser', '‡∏ã‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡∏¢‡∏π‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå')
    ]
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    user_type = models.CharField(
        max_length=10, 
        choices=USER_TYPES, 
        default='user',
        verbose_name='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
        help_text='‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
    )
    
    # üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
    daily_export_limit = models.IntegerField(
        default=10,  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å 50 ‡πÄ‡∏õ‡πá‡∏ô 10 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user ‡∏õ‡∏Å‡∏ï‡∏¥
        validators=[MinValueValidator(1), MaxValueValidator(1000)],
        verbose_name='‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô',
        help_text='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô'
    )
    daily_exports_used = models.IntegerField(
        default=0,
        validators=[MinValueValidator(0)],
        verbose_name='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ'
    )
    last_export_date = models.DateField(
        null=True, 
        blank=True,
        verbose_name='‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î'
    )
    
    # ‚ö†Ô∏è ‡πÄ‡∏Å‡πá‡∏ö conversion fields ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô (backward compatibility)
    daily_conversion_limit = models.IntegerField(
        default=50,
        validators=[MinValueValidator(1), MaxValueValidator(1000)],
        verbose_name='‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô (‡πÄ‡∏Å‡πà‡∏≤)',
        help_text='‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ backward compatibility'
    )
    daily_conversions_used = models.IntegerField(
        default=0,
        validators=[MinValueValidator(0)],
        verbose_name='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡πÄ‡∏Å‡πà‡∏≤)'
    )
    last_conversion_date = models.DateField(
        null=True, 
        blank=True,
        verbose_name='‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÄ‡∏Å‡πà‡∏≤)'
    )
    
    # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    total_conversions = models.IntegerField(
        default=0,
        verbose_name='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
    )
    total_exports = models.IntegerField(
        default=0,
        verbose_name='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
    )
    
    # üîê Security Questions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Password Reset
    security_question_1 = models.CharField(
        max_length=200,
        blank=True,
        null=True,
        verbose_name='‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡πâ‡∏≠ 1',
        help_text='‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô'
    )
    security_answer_1 = models.CharField(
        max_length=200,
        blank=True,
        null=True,
        verbose_name='‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠ 1',
        help_text='‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠ 1 (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å)'
    )
    security_question_2 = models.CharField(
        max_length=200,
        blank=True,
        null=True,
        verbose_name='‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡πâ‡∏≠ 2',
        help_text='‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô'
    )
    security_answer_2 = models.CharField(
        max_length=200,
        blank=True,
        null=True,
        verbose_name='‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠ 2',
        help_text='‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠ 2 (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å)'
    )


    class Meta:
        verbose_name = '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
        verbose_name_plural = '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
        ordering = ['-date_joined']
    
    def __str__(self):
        return f"{self.username} ({self.get_user_type_display()})"
    
    # üîÑ Export-related methods (‡πÉ‡∏´‡∏°‡πà)
    def reset_daily_exports_if_new_day(self):
        """Reset ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà"""
        
        # ‚úÖ ‡πÉ‡∏ä‡πâ zoneinfo ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Python 3.11
        from zoneinfo import ZoneInfo
        bangkok_tz = ZoneInfo("Asia/Bangkok")
        bangkok_time = timezone.now().astimezone(bangkok_tz)
        today = bangkok_time.date()
        
        # ‚úÖ Debug logs - ‡πÑ‡∏°‡πà‡∏°‡∏µ emoji
        print(f"DEBUG Reset Check - {self.username}:")
        print(f"   UTC time: {timezone.now()}")
        print(f"   Bangkok time: {bangkok_time}")
        print(f"   Today (Bangkok): {today}")
        print(f"   Last export date: {self.last_export_date}")
        print(f"   Current exports used: {self.daily_exports_used}")
        
        if self.last_export_date != today:
            print(f"RESET! Different date detected")
            old_used = self.daily_exports_used
            self.daily_exports_used = 0
            self.last_export_date = today
            self.save()
            print(f"   Reset exports: {old_used} -> 0")
        else:
            print(f"No reset - same date")
        
        print(f"   Final exports used: {self.daily_exports_used}")
        print("=" * 50)
    
    def can_export_today(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        self.reset_daily_exports_if_new_day()
        
        # Admin/Superuser ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î
        if self.user_type in ['admin', 'superuser']:
            return True
            
        return self.daily_exports_used < self.daily_export_limit
    
    def increment_export_count(self):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô"""
        self.reset_daily_exports_if_new_day()
        self.daily_exports_used += 1
        self.total_exports += 1
        self.save()
    
    def get_remaining_exports_today(self):
        """‡∏î‡∏π‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"""
        self.reset_daily_exports_if_new_day()
        
        if self.user_type in ['admin', 'superuser']:
            return -1  # ‚úÖ ‡πÉ‡∏ä‡πâ -1 ‡πÅ‡∏ó‡∏ô float('inf') ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ JSON serializable
            
        return max(0, self.daily_export_limit - self.daily_exports_used)
    
    # ‚ö†Ô∏è ‡πÄ‡∏Å‡πá‡∏ö conversion methods ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ (backward compatibility)
    def reset_daily_conversions_if_new_day(self):
        """Reset ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà"""
        today = timezone.now().date()
        if self.last_conversion_date != today:
            self.daily_conversions_used = 0
            self.last_conversion_date = today
            self.save()
    
    def can_convert_today(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÄ‡∏Å‡πà‡∏≤)"""
        # ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        return True
    
    def increment_conversion_count(self):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (‡πÄ‡∏Å‡πà‡∏≤)"""
        self.reset_daily_conversions_if_new_day()
        self.daily_conversions_used += 1
        self.total_conversions += 1
        self.save()
    
    def get_remaining_conversions_today(self):
        """‡∏î‡∏π‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡πÄ‡∏Å‡πà‡∏≤)"""
        # ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
        return -1  # ‚úÖ ‡πÉ‡∏ä‡πâ -1 ‡πÅ‡∏ó‡∏ô float('inf')
    
    # Other methods (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
    def is_admin_or_superuser(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô admin ‡∏´‡∏£‡∏∑‡∏≠ superuser"""
        return self.user_type in ['admin', 'superuser']
    
    def can_manage_users(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return self.user_type in ['admin', 'superuser']
    
    def can_delete_admin(self):
        """‡πÄ‡∏â‡∏û‡∏≤‡∏∞ superuser ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏ö admin ‡πÑ‡∏î‡πâ"""
        return self.user_type == 'superuser'

    # üîê Security Questions Methods
    def has_security_questions(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return bool(
            self.security_question_1 and self.security_answer_1 and
            self.security_question_2 and self.security_answer_2
        )
    
    def verify_security_answers(self, answer_1, answer_2):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
        if not self.has_security_questions():
            return False
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
        stored_answer_1 = self.security_answer_1.lower().strip()
        stored_answer_2 = self.security_answer_2.lower().strip()
        input_answer_1 = answer_1.lower().strip()
        input_answer_2 = answer_2.lower().strip()
        
        return (stored_answer_1 == input_answer_1 and 
                stored_answer_2 == input_answer_2)
    
    def set_security_questions(self, question_1, answer_1, question_2, answer_2):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
        self.security_question_1 = question_1
        self.security_answer_1 = answer_1.lower().strip()  # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å
        self.security_question_2 = question_2
        self.security_answer_2 = answer_2.lower().strip()  # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å
        self.save()
    
    @classmethod
    def get_predefined_security_questions(cls):
        """‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ"""
        return [
            "‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
            "‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
            "‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏õ‡∏£‡∏∞‡∏ñ‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
            "‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Å‡∏¥‡∏î‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
            "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
            "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
            "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
            "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≠‡∏ô‡πÄ‡∏î‡πá‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
            "‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤‡∏≠‡∏∞‡πÑ‡∏£?",
            "‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡∏ö‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Å‡∏¥‡∏î‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
            "‡πÄ‡∏Å‡∏°‡πÇ‡∏õ‡∏£‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏Å‡∏°‡∏≠‡∏∞‡πÑ‡∏£?"
        ]

class GuestSession(models.Model):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Guest (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ login)"""
    
    guest_id = models.CharField(
        max_length=36,  # UUID length
        verbose_name='Guest ID',
        help_text='UUID ‡∏à‡∏≤‡∏Å LocalStorage'
    )
    ip_address = models.GenericIPAddressField(
        verbose_name='IP Address',
        help_text='IP Address ‡∏™‡∏≥‡∏£‡∏≠‡∏á'
    )
    
    # Export limits ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Guest
    daily_exports_used = models.IntegerField(
        default=0,
        validators=[MinValueValidator(0)],
        verbose_name='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ'
    )
    last_export_date = models.DateField(
        null=True,
        blank=True,
        verbose_name='‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î'
    )
    
    # Metadata
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name='‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á session'
    )
    last_activity = models.DateTimeField(
        auto_now=True,
        verbose_name='‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î'
    )
    user_agent = models.TextField(
        blank=True,
        null=True,
        verbose_name='User Agent'
    )
    
    class Meta:
        verbose_name = 'Guest Session'
        verbose_name_plural = 'Guest Sessions'
        ordering = ['-last_activity']
        indexes = [
            models.Index(fields=['guest_id']),
            models.Index(fields=['ip_address']),
            models.Index(fields=['last_export_date']),
        ]
        # Unique constraint: one session per guest_id
        constraints = [
            models.UniqueConstraint(fields=['guest_id'], name='unique_guest_id')
        ]
    
    def __str__(self):
        return f"Guest {self.guest_id[:8]}... (IP: {self.ip_address})"
    
    GUEST_DAILY_LIMIT = 3  # Guest ‡πÑ‡∏î‡πâ 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô
    
    def reset_daily_exports_if_new_day(self):
        """Reset ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà"""
        
        # ‚úÖ ‡πÉ‡∏ä‡πâ zoneinfo ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Python 3.11
        from zoneinfo import ZoneInfo
        bangkok_tz = ZoneInfo("Asia/Bangkok")
        bangkok_time = timezone.now().astimezone(bangkok_tz)
        today = bangkok_time.date()
        
        # ‚úÖ Debug logs - ‡πÑ‡∏°‡πà‡∏°‡∏µ emoji
        print(f"DEBUG Reset Check - Guest {self.guest_id[:8]}:")
        print(f"   UTC time: {timezone.now()}")
        print(f"   Bangkok time: {bangkok_time}")
        print(f"   Today (Bangkok): {today}")
        print(f"   Last export date: {self.last_export_date}")
        print(f"   Current exports used: {self.daily_exports_used}")
        
        if self.last_export_date != today:
            print(f"RESET! Different date detected")
            old_used = self.daily_exports_used
            self.daily_exports_used = 0
            self.last_export_date = today
            self.save()
            print(f"   Reset exports: {old_used} -> 0")
        else:
            print(f"No reset - same date")
        
        print(f"   Final exports used: {self.daily_exports_used}")
        print("=" * 50)
    
    def can_export_today(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Guest ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        self.reset_daily_exports_if_new_day()
        return self.daily_exports_used < self.GUEST_DAILY_LIMIT
    
    def increment_export_count(self):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Guest"""
        self.reset_daily_exports_if_new_day()
        self.daily_exports_used += 1
        self.save()
    
    def get_remaining_exports_today(self):
        """‡∏î‡∏π‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Guest"""
        self.reset_daily_exports_if_new_day()
        return max(0, self.GUEST_DAILY_LIMIT - self.daily_exports_used)
    
    @classmethod
    def get_or_create_session(cls, guest_id, ip_address, user_agent=None):
        """‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Guest Session ‡πÉ‡∏´‡∏°‡πà"""
        try:
            # ‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ guest_id ‡∏Å‡πà‡∏≠‡∏ô
            session = cls.objects.get(guest_id=guest_id)
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï IP ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
            if session.ip_address != ip_address:
                session.ip_address = ip_address
                session.save()
            return session
        except cls.DoesNotExist:
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ IP
            try:
                session = cls.objects.filter(ip_address=ip_address).first()
                if session:
                    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï guest_id ‡πÉ‡∏´‡∏°‡πà
                    session.guest_id = guest_id
                    session.save()
                    return session
            except:
                pass
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
            return cls.objects.create(
                guest_id=guest_id,
                ip_address=ip_address,
                user_agent=user_agent
            )


class UserActivityLog(models.Model):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô"""
    
    ACTION_CHOICES = [
        ('register', '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å'),
        ('login', '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö'),
        ('logout', '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö'),
        ('upload_image', '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û'),
        ('convert_image', '‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û'),
        ('export_png', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å PNG'),
        ('export_svg', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å SVG'),
        ('export_pdf', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å PDF'),
        ('export_eps', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å EPS'),
        ('admin_delete_user', '‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'),
        ('admin_edit_user', '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'),
        ('admin_promote_user', '‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'),
        ('admin_view_logs', '‡∏î‡∏π‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'),
        ('password_reset', '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô'),  
        ('security_questions_verified', '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢'), 
        ('admin_change_password', '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÇ‡∏î‡∏¢ Admin'),
        ('admin_edit_security_questions', '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÇ‡∏î‡∏¢ Admin'),
    ]
    
    user = models.ForeignKey(
        User, 
        on_delete=models.CASCADE, 
        related_name='activity_logs',
        verbose_name='‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
    )
    action = models.CharField(
        max_length=30, 
        choices=ACTION_CHOICES,
        verbose_name='‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥'
    )
    timestamp = models.DateTimeField(
        auto_now_add=True,
        verbose_name='‡πÄ‡∏ß‡∏•‡∏≤',
        db_index=True  # ‡πÄ‡∏û‡∏¥‡πà‡∏° index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    )
    details = models.JSONField(
        null=True, 
        blank=True,
        verbose_name='‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',
        help_text='‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á, ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå'
    )
    
    class Meta:
        ordering = ['-timestamp']
        verbose_name = '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
        verbose_name_plural = '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
        indexes = [
            models.Index(fields=['user', '-timestamp']),
            models.Index(fields=['action', '-timestamp']),
            models.Index(fields=['timestamp']),  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        ]
    
    def __str__(self):
        return f"{self.user.username} - {self.get_action_display()} - {self.formatted_timestamp}"
    
    @property
    def formatted_timestamp(self):
        """Format timestamp ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤ Bangkok"""
        from zoneinfo import ZoneInfo
        bangkok_tz = ZoneInfo("Asia/Bangkok")
        bangkok_time = self.timestamp.astimezone(bangkok_tz)
        return bangkok_time.strftime('%d/%m/%Y %H:%M:%S')

    @property 
    def time_ago(self):
        """‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤ Bangkok"""
        from zoneinfo import ZoneInfo
        bangkok_tz = ZoneInfo("Asia/Bangkok")
        
        now_bangkok = timezone.now().astimezone(bangkok_tz)
        timestamp_bangkok = self.timestamp.astimezone(bangkok_tz)
        diff = now_bangkok - timestamp_bangkok
        
        if diff.days > 0:
            return f"{diff.days} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß"
        elif diff.seconds > 3600:
            hours = diff.seconds // 3600
            return f"{hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß"
        elif diff.seconds > 60:
            minutes = diff.seconds // 60
            return f"{minutes} ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß"
        else:
            return "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"
    
    def get_device_info(self):
        """‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• device ‡∏à‡∏≤‡∏Å user agent"""
        if not self.user_agent:
            return "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö"
        
        ua = self.user_agent.lower()
        if 'mobile' in ua or 'android' in ua or 'iphone' in ua:
            return "‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠"
        elif 'tablet' in ua or 'ipad' in ua:
            return "‡πÅ‡∏ó‡πá‡∏ö‡πÄ‡∏•‡πá‡∏ï"
        else:
            return "‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå"


class SystemLog(models.Model):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°"""
    
    LOG_LEVELS = [
        ('info', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'),
        ('warning', '‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô'),
        ('error', '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'),
        ('critical', '‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á'),
    ]
    
    level = models.CharField(
        max_length=10,
        choices=LOG_LEVELS,
        default='info',
        verbose_name='‡∏£‡∏∞‡∏î‡∏±‡∏ö'
    )
    message = models.TextField(
        verbose_name='‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°'
    )
    timestamp = models.DateTimeField(
        auto_now_add=True,
        verbose_name='‡πÄ‡∏ß‡∏•‡∏≤'
    )
    user = models.ForeignKey(
        User,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name='‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á'
    )
    
    class Meta:
        ordering = ['-timestamp']
        verbose_name = '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏∞‡∏ö‡∏ö'
        verbose_name_plural = '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏∞‡∏ö‡∏ö'
    
    def __str__(self):
        return f"[{self.get_level_display()}] {self.message[:50]}... - {self.timestamp.strftime('%d/%m/%Y %H:%M')}"